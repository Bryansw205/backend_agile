generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String
  role         String   @default("admin")
  createdAt    DateTime @default(now())
  // Préstamos creados por este usuario
  createdLoans Loan[]   @relation("CreatedBy")
}

model Client {
  id        Int      @id @default(autoincrement())
  dni       String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  loans     Loan[]
}

enum LoanStatus {
  PENDIENTE
  ACTIVO
  PAGADO
  ATRASADO
}

enum ScheduleStatus {
  PENDIENTE
  PAGADO
  ATRASADO
}


model Loan {
  id           Int               @id @default(autoincrement())
  clientId     Int
  client       Client            @relation(fields: [clientId], references: [id])
  createdByUserId Int
  createdBy    User             @relation("CreatedBy", fields: [createdByUserId], references: [id])
  principal    Decimal           @db.Decimal(18, 2)
  interestRate Decimal           @db.Decimal(7, 4) // Tasa anual (e.g., 0.2400 = 24%)
  termCount    Int
  startDate    DateTime
  status       LoanStatus        @default(PENDIENTE)
  createdAt    DateTime          @default(now())
  schedules    PaymentSchedule[]
  payments     Payment[]
}

model PaymentSchedule {
  id                Int            @id @default(autoincrement())
  loanId            Int
  loan              Loan           @relation(fields: [loanId], references: [id])
  installmentNumber Int
  dueDate           DateTime
  installmentAmount Decimal        @db.Decimal(18, 2)
  principalAmount   Decimal        @db.Decimal(18, 2)
  interestAmount    Decimal        @db.Decimal(18, 2)
  remainingBalance  Decimal        @db.Decimal(18, 2)
  status            ScheduleStatus @default(PENDIENTE)
  paidAt            DateTime?

  // Relación inversa hacia pagos asociados a esta cuota (opcional, puede ser múltiples pagos)
  payments Payment[]

  @@unique([loanId, installmentNumber])
}

model Payment {
  id         Int              @id @default(autoincrement())
  loanId     Int
  loan       Loan             @relation(fields: [loanId], references: [id])
  schedule   PaymentSchedule? @relation(fields: [scheduleId], references: [id])
  scheduleId Int?
  amount     Decimal          @db.Decimal(18, 2)
  paidAt     DateTime         @default(now())
  method     String?
  notes      String?
}
